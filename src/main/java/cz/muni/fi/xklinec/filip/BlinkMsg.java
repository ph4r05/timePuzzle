package cz.muni.fi.xklinec.filip;

/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'BlinkMsg'
 * message type.
 */

public class BlinkMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 4;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 144;

    /** Create a new BlinkMsg of size 4. */
    public BlinkMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new BlinkMsg of the given data_length. */
    public BlinkMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BlinkMsg with the given data_length
     * and base offset.
     */
    public BlinkMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BlinkMsg using the given byte array
     * as backing store.
     */
    public BlinkMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BlinkMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public BlinkMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BlinkMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public BlinkMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BlinkMsg embedded in the given message
     * at the given base offset.
     */
    public BlinkMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new BlinkMsg embedded in the given message
     * at the given base offset and length.
     */
    public BlinkMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <BlinkMsg> \n";
      try {
        s += "  [msgId=0x"+Long.toHexString(get_msgId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: msgId
    //   Field type: long, unsigned
    //   Offset (bits): 0
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'msgId' is signed (false).
     */
    public static boolean isSigned_msgId() {
        return false;
    }

    /**
     * Return whether the field 'msgId' is an array (false).
     */
    public static boolean isArray_msgId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'msgId'
     */
    public static int offset_msgId() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'msgId'
     */
    public static int offsetBits_msgId() {
        return 0;
    }

    /**
     * Return the value (as a long) of the field 'msgId'
     */
    public long get_msgId() {
        return (long)getUIntBEElement(offsetBits_msgId(), 32);
    }

    /**
     * Set the value of the field 'msgId'
     */
    public void set_msgId(long value) {
        setUIntBEElement(offsetBits_msgId(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'msgId'
     */
    public static int size_msgId() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'msgId'
     */
    public static int sizeBits_msgId() {
        return 32;
    }

}
